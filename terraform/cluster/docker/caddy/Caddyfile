{
    acme_ca https://acme-v02.api.letsencrypt.org/directory
    auto_https disable_redirects

    metrics /metrics

    servers {
		trace
	}

    log {
        output stdout
        format json
        level INFO
    }
}

http://node-${node_id}.${domain} {
    # Health check endpoint
    handle /api/health {
        respond "OK" 200
    }

    @ws {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    # Handle HTTP traffic
    handle {
        tracing {
			span grafana_http_handler
		}

        reverse_proxy grafana-${node_id}:3000 {
            header_up Host {http.request.host}
            header_up Origin {http.request.scheme}://{http.request.host}
            header_up X-Real-IP {http.request.remote}
        }
    }
}

(grafana_proxy) {
    @ws {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    handle @ws {
        tracing {
			span grafana_ws_tls_handler
		}

        reverse_proxy grafana-${node_id}:3000 {
            header_up Host {http.request.host}
            header_up Origin {http.request.scheme}://{http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up Connection *Upgrade*
            header_up Upgrade websocket
        }
    }

    handle {
        tracing {
			span grafana_http_tls_handler
		}

        encode {
            gzip
            zstd
            minimum_length 1024
        }

        reverse_proxy grafana-${node_id}:3000 {
            # Grafana requires us to pass the Host header for CSRF protection
            header_up Host {http.request.host}
            header_up Origin {http.request.scheme}://{http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_down X-Used-Host node-${node_id}.${domain}
            header_down -Referer
        }
    }
}

# Allow direct (TLS) access to the Grafana API
node-${node_id}.${domain} {
    tls {
        issuer acme
    }

    # Handle HTTPS traffic
    import grafana_proxy
}

# Allow the Load Balancer to access the Grafana API without having to use a certificate
${domain} {
    @standard_ports {
        expression {http.request.port} in [80, 443]
    }

    handle @standard_ports {
        import grafana_proxy
    }

    @alloy_http {
        expression {http.request.port} == 2053
    }

    @alloy_grpc {
        expression {http.request.port} == 2083
    }

    handle @alloy_http {
        basic_auth * bcrypt {
            ${otel_collector_username} ${otel_collector_password}
        }

        reverse_proxy alloy-${node_id}:4318 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
        }
    }

    handle @alloy_grpc {
        basic_auth * bcrypt {
            ${otel_collector_username} ${otel_collector_password}
        }

        reverse_proxy alloy-${node_id}:4317 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
        }
    }
}

# Allow direct (TLS) access to OpenTelemetry HTTP endpoint
node-${node_id}.${domain}:2053 {
    tls {
        issuer acme
    }

    basic_auth * bcrypt {
        ${otel_collector_username} ${otel_collector_password}
    }

    reverse_proxy alloy-${node_id}:4318 {
        header_up Host {http.request.host}
        header_up X-Real-IP {http.request.remote}
    }
}

# Allow direct (TLS) access to OpenTelemetry gRPC endpoint
node-${node_id}.${domain}:2083 {
    tls {
        issuer acme
    }

    basic_auth * bcrypt {
        ${otel_collector_username} ${otel_collector_password}
    }

    reverse_proxy alloy-${node_id}:4317 {
        header_up Host {http.request.host}
        header_up X-Real-IP {http.request.remote}
    }
}
